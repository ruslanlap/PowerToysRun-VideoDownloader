name: Build and Release VideoDownloader

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'

# Permissions for GITHUB_TOKEN (principle of least privilege)
permissions:
  contents: write  # Needed for creating releases
  issues: read
  pull-requests: read

# Add restrictions for parallel runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Build
        run: dotnet build VideoDownloader/VideoDownloader.sln -c Release -p:Platform="${{ matrix.platform }}"
      
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION=$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Debug Output
        run: |
          Get-ChildItem -Path "VideoDownloader" -Recurse -Directory | Where-Object { $_.Name -eq "Release" } | ForEach-Object { Write-Host $_.FullName }
        shell: pwsh
      
      - name: Create output directory
        run: mkdir -p artifacts
      
      - name: Copy build output to artifacts directory
        run: |
          $artifactDir = "artifacts/VideoDownloader-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          # Create the artifact directory
          New-Item -ItemType Directory -Force -Path $artifactDir
          
          # Create VideoDownloader subfolder
          New-Item -ItemType Directory -Force -Path "$artifactDir/VideoDownloader"
          
          # Define the direct path to the build output
          $buildOutput = "VideoDownloader/Community.PowerToys.Run.Plugin.VideoDownloader/bin/${{ matrix.platform }}/Release"
          
          Write-Host "Using build output directory: $buildOutput"
          
          # Check if the directory exists
          if (-not (Test-Path $buildOutput)) {
            Write-Host "Build output directory not found at expected path. Searching for it..."
            $buildOutput = Get-ChildItem -Path "VideoDownloader" -Recurse -Directory | 
                           Where-Object { $_.Name -eq "Release" -and $_.FullName -like "*${{ matrix.platform }}*" } | 
                           Select-Object -First 1 -ExpandProperty FullName
            
            if ($buildOutput) {
              Write-Host "Found build output directory: $buildOutput"
            } else {
              Write-Error "Could not find any Release directory for platform ${{ matrix.platform }}"
              exit 1
            }
          }
          
          # Check if build output exists before proceeding
          if (-not (Test-Path $buildOutput)) {
            Write-Error "Build output directory not found"
            exit 1
          }
          
          # Check for files directly in the build output directory
          $files = Get-ChildItem -Path $buildOutput -File
          if ($files.Count -gt 0) {
            Write-Host "Found $($files.Count) files in build output directory. Copying directly..."
            Copy-Item -Path "$buildOutput/*" -Destination "$artifactDir/VideoDownloader" -Recurse -Force
            Write-Host "Files copied successfully"
          } else {
            # Look for a .NET runtime folder
            $runtimeFolder = Get-ChildItem -Path $buildOutput -Directory | 
                             Where-Object { $_.Name -like "net*-windows*" } | 
                             Select-Object -First 1 -ExpandProperty FullName
            
            if ($runtimeFolder) {
              Write-Host "Found runtime folder: $runtimeFolder"
              Copy-Item -Path "$runtimeFolder/*" -Destination "$artifactDir/VideoDownloader" -Recurse -Force
              Write-Host "Files copied successfully from runtime folder"
            } else {
              # If no runtime folder, check for any subdirectories
              $subDirs = Get-ChildItem -Path $buildOutput -Directory
              if ($subDirs.Count -gt 0) {
                $firstSubDir = $subDirs[0].FullName
                Write-Host "No runtime folder found, but found subdirectory: $firstSubDir"
                Copy-Item -Path "$firstSubDir/*" -Destination "$artifactDir/VideoDownloader" -Recurse -Force
                Write-Host "Files copied from first subdirectory"
              } else {
                Write-Error "No files or subdirectories found in build output directory"
                exit 1
              }
            }
          }
        shell: pwsh
      
      - name: Create ZIP archive
        run: |
          $artifactDir = "artifacts/VideoDownloader-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          $zipFile = "VideoDownloader-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}.zip"
          
          # Create the zip file
          Compress-Archive -Path "$artifactDir/VideoDownloader" -DestinationPath "artifacts/$zipFile"
        shell: pwsh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: artifacts/*.zip
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Prepare Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOL'
          # üìù VideoDownloader v${{ steps.get_version.outputs.VERSION }}
          
          <p align="center">
            <img src="https://github.com/ruslanlap/PowerToysRun-VideoDownloader/blob/master/assets/logo.png" width="128px" alt="VideoDownloader Logo" />
          </p>
          
          ## ‚ú® What's New
          
          <!-- Add your release highlights here -->
          - üöÄ Performance improvements
          - üêõ Bug fixes
          - ‚ú® New features
          
          ## üì• Installation
          
          1. Download the ZIP file for your platform (x64 or ARM64)  
          2. Extract to `%LOCALAPPDATA%\Microsoft\PowerToys\PowerToys Run\Plugins\`  
          3. Restart PowerToys  
          4. Start using with `Alt+Space` then type `dl <URL>`
          
          ## üîç Quick Commands
          
          | Command                     | Description                         |
          |-----------------------------|-------------------------------------|
          | `dl <URL>`                  | Download a video in the best quality |
          | `dl --audio <URL>`          | Download audio only                  |
          | `dl --quality <quality> <URL>` | Download with specific quality      |
          | `dl --list-formats <URL>`   | Show available formats               |
          
          ## üôè Thank You
          
          Thank you for using VideoDownloader! If you encounter any issues or have suggestions, please [open an issue](https://github.com/ruslanlap/CommunityPowerToysRunPlugin-VideoDownloader/issues).
          
          Made with ‚ù§Ô∏è by <a href="https://github.com/ruslanlap">ruslanlap</a>
          EOL
          
          RELEASE_NOTES=$(cat release_notes.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: VideoDownloader v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            artifacts/build-artifacts-x64/*.zip
            artifacts/build-artifacts-arm64/*.zip
            
      - name: Create Latest Release Artifacts
        if: success()
        run: |
          mkdir -p latest_release
          cp artifacts/build-artifacts-x64/VideoDownloader-v${{ steps.get_version.outputs.VERSION }}-x64.zip latest_release/VideoDownloader-latest-x64.zip
          cp artifacts/build-artifacts-arm64/VideoDownloader-v${{ steps.get_version.outputs.VERSION }}-arm64.zip latest_release/VideoDownloader-latest-arm64.zip
      
      - name: Update Latest Release Artifacts
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          name: VideoDownloader v${{ steps.get_version.outputs.VERSION }}
          tag_name: latest
          files: |
            latest_release/VideoDownloader-latest-x64.zip
            latest_release/VideoDownloader-latest-arm64.zip